# coding: utf-8

foldername = "images/fotolia_processed"
images = []
for r, dirs, files in os.walk(foldername):
	# Get all the images
	for file in files:
		img = cv2.imread(os.sep.join([r, file]))
		if img is not None:
			images.append(img)
		else:
			print("%s not found."%(file))
import os, sys
import sys, os
import cv2
import numpy as np
import warnings
from matplotlib import pyplot as plt
images = []
for r, dirs, files in os.walk(foldername):
	# Get all the images
	for file in files:
		img = cv2.imread(os.sep.join([r, file]))
		if img is not None:
			images.append(img)
		else:
			print("%s not found."%(file))
images
# Compute gradients
print("Computing gradients.")
gradx = map(lambda x: cv2.Sobel(x, cv2.CV_64F, 1, 0, ksize=KERNEL_SIZE), images)
grady = map(lambda x: cv2.Sobel(x, cv2.CV_64F, 0, 1, ksize=KERNEL_SIZE), images)
# Variables
KERNEL_SIZE = 3
MIN_VAL = 250
MAX_VAL = 255
THRESHOLD = 0.4
# Compute gradients
print("Computing gradients.")
gradx = map(lambda x: cv2.Sobel(x, cv2.CV_64F, 1, 0, ksize=KERNEL_SIZE), images)
grady = map(lambda x: cv2.Sobel(x, cv2.CV_64F, 0, 1, ksize=KERNEL_SIZE), images)

# Compute median of grads
print("Computing median gradients.")
Wm_x = np.median(np.array(gradx), axis=0) 					
Wm_y = np.median(np.array(grady), axis=0)
def PlotImage(img):
    return (img - np.min(img))/(np.max(img)-np.min(img))
plt.imshow(PlotImage(Wm_x))
plt.show()
uxx = cv2.Sobel(Wm_x, cv2.CV_64F, 1, 0, ksize=KERNEL_SIZE)
plt.imshow(PlotImage(uxx))
plt.show()
uyy = cv2.Sobel(Wm_y, cv2.CV_64F, 0, 1, ksize=KERNEL_SIZE)
laplacian = uxx + uyy
f 
f = laplacian
h = 0.1
f
plt.imshow(PlotImage(f))
plt.show()
f.shape
uu
u
u = np.zeros(images[0].shape)
l
l = []
tmp = np.random.randn(f.shape)
tmp = np.random.random(f.shape)
tmp
tmp.shape
tmp[1,-1,:]=0
tmp
tmp = np.random.random(f.shape)
tmp[1,:,:]=0
tmp
tmp[-1,:,:]=0
tmp
tmp = np.random.random(f.shape)
tmp[0,:,:]=0
tmp[-1,:,:]=0
tmp[:,0,:]=0
tmp[:,-1,:]=0
tmp
plt.imshow(PlotImage(tmp))
plt.show()
l.append(tmp)
for i in xrange(20):
    print(i)
    tmp[1:-1, 1:-1, :] = 0.25*(tmp[0:-2, 1:-1, :] + tmp[1:-1, 0:-2, :] + tmp[2:, 1:-1, :] + tmp[1:-1, 2:, :] - h*h*f[1:-1, 1:-1, :])
    l.append(tmp)
    
for i in xrange(20):
    plt.imshow(PlotImage(l[i]))
    plt.figure()
    
plt.show()
get_ipython().magic(u'save recover')
get_ipython().magic(u'save')
get_ipython().magic(u'save recover.txt')
get_ipython().magic(u'save recover.txt 0-56')
